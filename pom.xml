<?xml version="1.0" encoding="UTF-8"?>
<!--~
  ~ Copyright 2019 Confluent Inc.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  ~-->
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>io.confluent.control-center-images-next-gen</groupId>
    <artifactId>control-center-images-parent-next-gen</artifactId>
    <packaging>pom</packaging>
    <name>Control Center Docker Images</name>
    <description>Build files for Confluent's control center Docker images</description>
    <version>2.3.0-0</version>

   <modules>
       <module>control-center</module>
       <module>prometheus</module>
       <module>alertmanager</module>
    </modules>
    <build>
        <plugins>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>${exec-maven-plugin.version}</version>
                <executions>
                    <execution>
                        <id>python-docker-tests</id>
                        <phase>integration-test</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <skip>${docker.skip-test}</skip>
                            <environmentVariables>
                                <TOX_TESTENV_PASSENV>DOCKER_REGISTRY DOCKER_TAG DOCKER_TEST_REGISTRY DOCKER_TEST_TAG DOCKER_HOST</TOX_TESTENV_PASSENV>
                                <DOCKER_REGISTRY>${docker.registry}</DOCKER_REGISTRY>
                                <DOCKER_TAG>${docker.tag}</DOCKER_TAG>
                                <DOCKER_TEST_REGISTRY>${docker.test-registry}</DOCKER_TEST_REGISTRY>
                                <DOCKER_TEST_TAG>${docker.test-tag}</DOCKER_TEST_TAG>
                            </environmentVariables>
                            <executable>tox</executable>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>dockerfile-maven-plugin</artifactId>
                <version>${dockerfile-maven-plugin.version}</version>
                <configuration>
                    <buildArgs>
                        <UBI_MINIMAL_VERSION>${ubi9.minimal.image.version}</UBI_MINIMAL_VERSION>
                        <UBI_MICRO_VERSION>${ubi9.micro.image.version}</UBI_MICRO_VERSION>
                        <ARCH>${arch.type}</ARCH>
                        <C3_VERSION>${C3_VERSION}</C3_VERSION>
                        <TEMURIN_JDK_VERSION>-${ubi.temurin.jdk.version}</TEMURIN_JDK_VERSION>
                        <GOLANG_VERSION>${golang.version}</GOLANG_VERSION>
                    </buildArgs>
                </configuration>
            </plugin>
          </plugins>
    </build>

    <profiles>
        <profile>
            <id>docker</id>
            <activation>
                <property>
                    <name>env.DOCKER_HOST</name>
                </property>
            </activation>
        </profile>
        <profile>
            <id>docker-arm</id>

            <properties>
                <ALLOW_UNSIGNED>true</ALLOW_UNSIGNED>
                <CONFLUENT_DEB_VERSION>unknown</CONFLUENT_DEB_VERSION>
                <CONFLUENT_PLATFORM_LABEL>unknown</CONFLUENT_PLATFORM_LABEL>
            </properties>

            <build>
                <plugins>
                    <plugin>
                        <groupId>io.fabric8</groupId>
                        <artifactId>docker-maven-plugin</artifactId>
                        <configuration>
                            <images>
                                <image>
                                    <build>
                                        <args>
                                            <UBI_MINIMAL_VERSION>${ubi9.minimal.image.version}</UBI_MINIMAL_VERSION>
                                            <UBI_MICRO_VERSION>${ubi9.micro.image.version}</UBI_MICRO_VERSION>
                                            <ARCH>${arch.type}</ARCH>
                                            <C3_VERSION>${C3_VERSION}</C3_VERSION>
                                            <TEMURIN_JDK_VERSION>-${ubi.temurin.jdk.version}</TEMURIN_JDK_VERSION>
                                            <GOLANG_VERSION>${golang.version}</GOLANG_VERSION>
                                        </args>
                                    </build>
                                </image>
                            </images>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>


    <properties>
        <exec-maven-plugin.version>1.5.0</exec-maven-plugin.version>
        <dockerfile-maven-plugin.version>1.4.13</dockerfile-maven-plugin.version>

        <component.name>control-center</component.name>
        <io.confluent.control-center-next-gen-images.version>2.3.0-0</io.confluent.control-center-next-gen-images.version>
        <arch.type>.arm64</arch.type>
        <!--  This is a placeholder for the architecture of the image that we will need from input
         and the input will come in mvn command from semaphore.yml file -->
        <docker.file>Dockerfile.ubi9</docker.file>

        <!-- Properties required for docker image build -->
        <ubi9.micro.image.version>9.6-1754345610</ubi9.micro.image.version>
        <ubi9.minimal.image.version>9.6-1754584681</ubi9.minimal.image.version>
        <ubi.temurin.jdk.version>21.0.8.0.0.9-1</ubi.temurin.jdk.version>
        <golang.version>1.24.6-bullseye</golang.version>
        <docker.skip-test>true</docker.skip-test>
        <docker.registry>placeholder/</docker.registry>  <!-- Registry for this build. Must specify a value, or exec plugin throws NPE :((( -->
        <docker.tag>${project.version}</docker.tag>  <!-- Tag for this build -->
        <docker.upstream-registry>${docker.registry}</docker.upstream-registry>  <!-- Registry for base images -->
        <docker.upstream-tag>${docker.tag}</docker.upstream-tag>  <!-- Tag for base images -->
        <docker.test-registry>${docker.upstream-registry}</docker.test-registry>  <!-- Registry for integration test dependencies -->
        <docker.test-tag>${docker.upstream-tag}</docker.test-tag>  <!-- Tag for integration test dependencies -->
    </properties>
</project>
