{{- /* 
********************************************************************************************** 
* IMPORTANT TO NOTE: These properties are required properties, and they not only have special 
* translations but also have a list of valid translations.
********************************************************************************************** 
*/ -}}
{{- $required_props := createStringSliceMap -}}
{{- $required_props = setStringSliceMapValue $required_props "bootstrap.servers" (stringSlice "CONTROL_CENTER_BOOTSTRAP_SERVERS") -}}
{{- $required_props = setStringSliceMapValue $required_props "zookeeper.connect" (stringSlice "CONTROL_CENTER_ZOOKEEPER_CONNECT") -}}
{{- $required_props = setStringSliceMapValue $required_props "confluent.controlcenter.data.dir" (stringSlice "CONTROL_CENTER_DATA_DIR") -}}
{{- $required_props = setStringSliceMapValue $required_props "confluent.monitoring.interceptor.topic.replication" (stringSlice "CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_REPLICATION" "CONTROL_CENTER_REPLICATION_FACTOR") -}}
{{- $required_props = setStringSliceMapValue $required_props "confluent.controlcenter.internal.topics.replication" (stringSlice "CONTROL_CENTER_INTERNAL_TOPICS_REPLICATION" "CONTROL_CENTER_REPLICATION_FACTOR") -}}
{{- $required_props = setStringSliceMapValue $required_props "confluent.controlcenter.command.topic.replication" (stringSlice "CONTROL_CENTER_COMMAND_TOPIC_REPLICATION" "CONTROL_CENTER_REPLICATION_FACTOR") -}}
{{- $required_props = setStringSliceMapValue $required_props "confluent.metrics.topic.replication" (stringSlice "CONTROL_CENTER_METRICS_TOPIC_REPLICATION" "CONFLUENT_METRICS_TOPIC_REPLICATION" "CONTROL_CENTER_REPLICATION_FACTOR") -}}

{{- /* 
********************************************************************************************** 
* IMPORTANT TO NOTE: These properties have uncommon prefixes. Though ideally C3 properties should
* have the common prefix `confluent.controlcenter.`, which translates to `CONTROL_CENTER_`.
********************************************************************************************** 
*/ -}}
{{- $special_props := createStringSliceMap -}}
{{- $special_props = setStringSliceMapValue $special_props "config.providers" (stringSlice "CONFIG_PROVIDERS") -}}
{{- $special_props = setStringSliceMapValue $special_props "config.providers.securepass.class" (stringSlice "CONFIG_PROVIDERS_SECUREPASS_CLASS") -}}
{{- $special_props = setStringSliceMapValue $special_props "confluent.license" (stringSlice "CONTROL_CENTER_LICENSE" "CONTROL_CENTER_CONFLUENT_LICENSE") -}}
{{- $special_props = setStringSliceMapValue $special_props "public.key.path" (stringSlice "PUBLIC_KEY_PATH") -}}

{{- /* Use the external setProperties function which is implemented in Go code */ -}}
{{- $excludes := stringSlice -}}

{{- /* 
********************************************************************************************** 
* setProperties should be used for properties that have special translation, and have a list of 
* valid translations that could be used. For example, confluent.metrics.topic has two valid 
* possible translations: [CONTROL_CENTER_METRICS_TOPIC_REPLICATION, CONFLUENT_METRICS_TOPIC_REPLICATION].
* SET_PROPERTIES will try all the possible translations. If a property is required and none of the possible
* translation was configured in the env variables, then the property is set to an empty string.
* If a property is not required and none of the possible translation was configured in the env
* variables, nothing will be set. Each translated property is appended to excludes as well.
********************************************************************************************** 
*/ -}}

{{- /* Call setProperties for required_props */ -}}
{{- $required_result := setProperties $required_props true $excludes -}}
{{- range $property, $value := $required_result -}}
{{ $property }}={{ $value -}}
{{- $excludes = append $excludes $property }}
{{ end -}}

{{- /* Call setProperties for special_props */ -}}
{{- $special_result := setProperties $special_props false $excludes -}}
{{- range $property, $value := $special_result -}}
{{ $property }}={{ $value -}}
{{- $excludes = append $excludes $property }}
{{ end -}}

{{- $monitoring_interceptor_result := envToProps "CONTROL_CENTER_MONITORING_INTERCEPTOR_" "confluent.monitoring.interceptor." $excludes nil nil -}}
{{- range $name, $value := $monitoring_interceptor_result -}}
{{ $name }}={{ $value -}}
{{- $excludes = append $excludes $name }}
{{ end -}}

{{- $metadata_result := envToProps "CONFLUENT_METADATA_" "confluent.metadata." $excludes nil nil -}}
{{- range $name, $value := $metadata_result -}}
{{ $name }}={{ $value -}}
{{- $excludes = append $excludes $name }}
{{ end -}}

{{- $support_result := envToProps "CONFLUENT_SUPPORT_" "confluent.support." $excludes nil nil -}}
{{- range $name, $value := $support_result -}}
{{ $name }}={{ $value -}}
{{- $excludes = append $excludes $name }}
{{ end -}}

{{- /*
**********************************************************************************************
* setPropertiesWithEnvToPropsWithTwoPrefixes should be used for properties that have two
* fixed translations to the env variables. For example, for metrics properties, both
* CONTROL_CENTER_METRICS_ and CONFLUENT_METRICS_ deterministically always translate to
* confluent.metrics. However, the first env prefix takes precedence. Therefore, this function
* only sets a property that starts with the secondary env prefix if the property hasn't been set
* with the primary env prefix. We shouldn't find two copies of the same property being translated
* by both the primary and the secondary env prefix. Each translated property is NOT appended to
* excludes.
* Note this func could be deleted if env_to_props appends each translated property to excludes.
**********************************************************************************************
*/ -}}

{{- $metrics_result := setPropertiesWithEnvToPropsWithTwoPrefixes "CONTROL_CENTER_METRICS_" "CONFLUENT_METRICS_" "confluent.metrics." nil $excludes -}}
{{- range $name, $value := $metrics_result -}}
{{ $name }}={{ $value -}}
{{- $excludes = append $excludes $name }}
{{ end -}}

{{- /*
**********************************************************************************************
* skip_prop_prefix should be used for properties that in general have a fixed
* translation, but have a few props prefixes that should be skipped. For example, properties
* that start with CONTROL_CENTER_ in general translates to confluent.controlcenter. However,
* CONTROL_CENTER_METRICS_* and CONTROL_CENTER_MONITORING_INTERCEPTOR_* also start with
* CONTROL_CENTER_ but they are special and should be skipped. Each translated property is NOT
* appended to excludes.
* Note this func could be deleted if env_to_props appends each translated property to excludes.
**********************************************************************************************
*/ -}}

{{- /* Skip properties that are already handled by required_props or would cause duplicates */ -}}
{{- $skip_prop_prefix := stringSlice "confluent.controlcenter.metrics." "confluent.controlcenter.monitoring.interceptor." "confluent.controlcenter.bootstrap.servers" "confluent.controlcenter.zookeeper.connect" "confluent.controlcenter.replication.factor" "confluent.controlcenter.command.topic.replication" "confluent.controlcenter.internal.topics.replication" "confluent.controlcenter.metrics.topic.replication" -}}

{{- $control_center_result := envToProps "CONTROL_CENTER_" "confluent.controlcenter."  nil $skip_prop_prefix $excludes -}}
{{- range $name, $value := $control_center_result -}}
{{ $name }}={{ $value -}}
{{- $excludes = append $excludes $name }}
{{ end -}}
